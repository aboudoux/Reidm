// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Reidm.infrastructure.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EtudeDesImmeublesFeature : object, Xunit.IClassFixture<EtudeDesImmeublesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EtudesImmeubles.feature"
#line hidden
        
        public EtudeDesImmeublesFeature(EtudeDesImmeublesFeature.FixtureData fixtureData, Reidm_infrastructure_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Etude des immeubles", "Cett fonctionnalité permet de gérer les immeubles à étudier, c\'est à dire la coll" +
                    "ecte des informations\r\npour prendre une décision d\'achat.\r\npour l\'instant il n\'y" +
                    " a pas de traitement spécifique. juste de l\'enregistrement de données issues du " +
                    "terrain.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajout d\'un nouvel immeuble a étudier")]
        [Xunit.TraitAttribute("FeatureTitle", "Etude des immeubles")]
        [Xunit.TraitAttribute("Description", "Ajout d\'un nouvel immeuble a étudier")]
        public virtual void AjoutDunNouvelImmeubleAEtudier()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajout d\'un nouvel immeuble a étudier", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("Aucun immeuble n\'est à étudier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("J\'ajoute un nouvel immeuble a étudier du nom de \"TEST IMMEUBLE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("Un nouvel immeuble nommé \"TEST IMMEUBLE\" est à étudier.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Modification des informations d\'un immeuble")]
        [Xunit.TraitAttribute("FeatureTitle", "Etude des immeubles")]
        [Xunit.TraitAttribute("Description", "Modification des informations d\'un immeuble")]
        public virtual void ModificationDesInformationsDunImmeuble()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modification des informations d\'un immeuble", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immeuble"});
                table1.AddRow(new string[] {
                            "TEST1"});
#line 14
 testRunner.Given("Une liste d\'immeubles à étuder", ((string)(null)), table1, "Given ");
#line hidden
#line 17
 testRunner.When("Je modifie la valeur \"Surface\" de l\'immeuble \"TEST1\" en 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.And("Je modifie la valeur \"BuildYear\" de l\'immeuble \"TEST1\" en 2005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("Je modifie la valeur \"PropertyTax\" de l\'immeuble \"TEST1\" en 2700", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("Je modifie la valeur \"SellingPrice\" de l\'immeuble \"TEST1\" en 300000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("Je modifie la valeur \"Address\" de l\'immeuble \"TEST1\" en \"12 rue du test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("Je modifie la valeur \"Comments\" de l\'immeuble \"TEST1\" en \"recemment rénové\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("Je modifie la valeur \"LastWorks\" de l\'immeuble \"TEST1\" en \"Chambre enfant refaite" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("Je modifie la valeur \"WantAddLink\" de l\'immeuble \"TEST1\" en \"http://test.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("Je modifie la valeur \"Attics\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("Je modifie la valeur \"Basement\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("Je modifie la valeur \"ClassifiedArea\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("Je modifie la valeur \"SeparateElectricMeters\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("Je modifie la valeur \"SeparateWaterMeters\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("Je modifie la valeur \"SewageServices\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("Je modifie la valeur \"TownGas\" de l\'immeuble \"TEST1\" en true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("L\'information \"Surface\" de l\'immeuble \"TEST1\" à pour valeur 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("L\'information \"BuildYear\" de l\'immeuble \"TEST1\" à pour valeur 2005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("L\'information \"PropertyTax\" de l\'immeuble \"TEST1\" à pour valeur 2700", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("L\'information \"SellingPrice\" de l\'immeuble \"TEST1\" à pour valeur 300000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("L\'information \"Address\" de l\'immeuble \"TEST1\" à pour valeur \"12 rue du test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("L\'information \"Comments\" de l\'immeuble \"TEST1\" à pour valeur \"recemment rénové\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("L\'information \"LastWorks\" de l\'immeuble \"TEST1\" à pour valeur \"Chambre enfant ref" +
                        "aite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And("L\'information \"WantAddLink\" de l\'immeuble \"TEST1\" à pour valeur \"http://test.com\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("L\'information \"Attics\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("L\'information \"Basement\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("L\'information \"ClassifiedArea\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("L\'information \"SeparateElectricMeters\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("L\'information \"SeparateWaterMeters\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("L\'information \"SewageServices\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("L\'information \"TownGas\" de l\'immeuble \"TEST1\" à pour valeur true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Liste des immeubles avec details sur prix et surface")]
        [Xunit.TraitAttribute("FeatureTitle", "Etude des immeubles")]
        [Xunit.TraitAttribute("Description", "Liste des immeubles avec details sur prix et surface")]
        public virtual void ListeDesImmeublesAvecDetailsSurPrixEtSurface()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Liste des immeubles avec details sur prix et surface", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
testRunner.Given("Aucun immeuble n\'est à étudier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.And("J\'ajoute un nouvel immeuble a étudier du nom de \"TEST1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("Je modifie la valeur \"Surface\" de l\'immeuble \"TEST1\" en 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("Je modifie la valeur \"SellingPrice\" de l\'immeuble \"TEST1\" en 300000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("J\'ajoute un nouvel immeuble a étudier du nom de \"TEST2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("Je modifie la valeur \"Surface\" de l\'immeuble \"TEST2\" en 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("Je modifie la valeur \"SellingPrice\" de l\'immeuble \"TEST2\" en 250000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immeuble",
                            "Surface",
                            "SellingPrice"});
                table2.AddRow(new string[] {
                            "TEST1",
                            "20",
                            "300000"});
                table2.AddRow(new string[] {
                            "TEST2",
                            "12",
                            "250000"});
#line 58
testRunner.Then("La liste des immeubles à étudier est", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EtudeDesImmeublesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EtudeDesImmeublesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
